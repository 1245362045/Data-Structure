算法：算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。

算法具有五个基本特性：输入、输出、可行性、确定性、有穷性。
输入输出：算法有零个或多个输入，算法至少有一个或多个输出。
有穷性：算法在执行有限的步骤后，自动结束而不会无限循环，并且每一个步骤都在可接受的时间内完成。
确定性：算法的每一步都具有确定的含义，不会出现二义性。（只有一条执行路径，相同的输入只能有唯一的输出结果）
可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。

算法的设计要求：正确性、可读性、健壮性、时间效率高和存储量低的需求。
正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性，能正确地反映问题的需求，能够得到问题的正确答案。
可读性：算法设计的另一目的是为了方便阅读、理解和交流。（需要一定的注释让人容易理解，可读性是算法好坏很重要的标志）
健壮性：当输入的数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。
时间效率高和存储量低的需求：算法执行时间短、执行过程中需求的最大存储空间小（程序运行时所占内存和外部磁盘存储空间）

算法效率的度量方法：事后统计法、事前分析估算方法
事后统计法：这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。
事前分析估算方法：在计算机程序编制前，依据统计方法对算法进行估算。

算法估算：
（1）算法采用的策略、方法。
（2）编译产生的代码质量。
（3）问题的输入规模。
（4）机器执行指令的速度。
一条程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。

测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。
最终，在分析程序的运行时间时，最重要的是把程序看成时独立于程序设计语言的算法或一系列步骤。
分析一个算法的运行时间时，最重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。

函数的渐进增长：给定两个函数f（n）、g（n），如果存在一个整数N，使得对于所有的n>N，f（n）总比g（n）大，我们就说f（n）的增长渐进快于g（n）。
判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数，同时与最高次项相乘的常数并不重要。

算法时间复杂度：
在进行算法分析时，语句总的执行次数T（n）是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T（n）的数量级。算法是的时间复杂度，也就是算法的时间量度，记做T（n）=O（f（n））。
它表示随问题规模n的变大，算法执行时间的增长率和f（n）的增长率相同，称作算法的渐进时间复杂度，简称为时间复杂度。其中f（n）是问题规模n的函数。
一般情况下，随着n的增大，T（n）增长最慢的算法为最优算法。

推导大O阶的方法：
（1）用常数1代替算法运行中的所有加法常数。
（2）在修改后的运行次数函数中，只保留最高阶项。
（3）如果最高阶项存在且系数不是1，则去除与这个项相乘的系数。得到的结果就是大O阶。
对于分支结构，其时间复杂度时O（1）。

分析算法的复杂度，关键就是要分析循环结构的运行情况。
循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数。

O（1）<（log2N）<（N）<（Nlog2N）<（N^2）<（N^3）<（2^N）<（N!）<（N^N）。

平均运行时间是所有情况中最有意义的，因为它是期望的运行时间。
一般在没有特殊说明的情况下，都是指最坏的时间复杂度。

一个程序在机器上执行时，出来需要存储程序本身的指令、常熟、变量和输入数据外，还需要存储对数据操作的存储单元。
若算法执行时所需的辅助空间相对于输入数据量而言是个常数，则称此算法为原地工作，空间复杂度为O（1）。
当不用限定词的使用“复杂度”时，通常是指时间复杂度。


