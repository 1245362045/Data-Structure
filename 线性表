线性表：零个或多个数据元素的有限序列。
在复杂的线性表中，一个数据元素可以由若干个数据项组成

ADT 线性表（List）
Data
        线性表数据元素的类型均为DataType,除了第一个元素外每一个元素都有一个直接前驱，除了最后一个元素每一个元素都有一个直接后继。数据元素之间是一对一的关系。
Operation
          InitList（*L) :初始化操作，建立一个空的线性表L
          ListEmpty（L）：若线性表为空，则返回true，否则返回false
          ClearList（*L）:将线性表清空
          GetElem(L,i,*e):将线性表L中的第i个位置元素返回给e
         LocateElem(L,e):在线性表查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则返回0表示失败
         ListInsert（*L，i，e）：在线性表L中的第i个位置插入新元素e
         ListDelete（*L，i，*e）：删除线性表L中的第i个位置元素并用e返回其值
         ListLength(L):返回线性表L的元素个数
endADT

/*将所有的在线性表Lb中但不在La中的数据元素插入到La中*/
void unionL（SqList &L,SqList Lb）
{
   int La_len,Lb_len,i;
   ElemType e;                                                         //声明与La、Lb相同的数据元素e
   La_len=ListLength(*La);                                       //求线性表的长度
   Lb_len=ListLength(*Lb);
   for(i=1;i<=Lb_len;i++)
      {
          GetElem(Lb,i,&e);                                        //去Lb中第i个数据元素赋给e
          if(!LocateElem(*La,e))                                  //La中不存在和e相同的数据元素
                  ListInsert(La,++La_len,e);                    //插入
      }
}

当你传递一个参数给函数的时候，这个参数会不会在函数内被改动，决定了使用什么参数形式：
       如果需要被改动，则需要传递指向之歌参数的指针。
       如果不用被改动，可以传递这个参数。

线性表的顺序存储结构：指的是用一段地址连续的存储单元依次存储线性表的数据元素。
用一维数组来实现顺序存储结构

#define MAXSIZE 20                         //存储空间初始分配量
typedef int ElemType;                       //ElemType类型根据实际情况而定，这里为int
typedef struct
{
    ElemType data[MAXSIZE];            //数组存储数据元素
    int length;                                     //线性表当前长度
}SqList;

线性表的存取时间性能为O（1），通常把具有这一特点的存储结构称为随机存取结构。
存储器中的每个存储单元都有自己的编号，这个编号称为地址。
